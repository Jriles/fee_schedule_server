/*
 * CorpFees
 *
 * API for the Corp Fees central.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package fee_schedule_server

import (
	"database/sql"
	"net/http"

	"github.com/gin-gonic/gin"
)

// CreateAttribute -
func CreateAttribute(c *gin.Context) {
	db, ok := c.MustGet("databaseConn").(*sql.DB)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{})
	}

	var requestBody Attribute
	if err := c.BindJSON(&requestBody); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{})
	} else {
		title := requestBody.Title
		sqlStatement := `
		INSERT INTO attributes (title)
		VALUES ($1)
		RETURNING id
		`
		id := ""
		err := db.QueryRow(sqlStatement, title).Scan(&id)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{})
		}
		successfulRes := AttributeResponse{Id: id}
		c.JSON(http.StatusOK, successfulRes)
	}
}

// CreateAttributeValue -
func CreateAttributeValue(c *gin.Context) {
	db, ok := c.MustGet("databaseConn").(*sql.DB)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{})
	}

	var requestBody AttributeValue
	attributeId := c.Param("attributeId")
	if err := c.BindJSON(&requestBody); err != nil || attributeId == "" {
		c.JSON(http.StatusBadRequest, gin.H{})
	} else {
		title := requestBody.Title
		sqlStatement := `
		INSERT INTO attribute_values (title, attribute_id)
		VALUES ($1, $2)
		RETURNING id
		`
		id := ""
		err := db.QueryRow(sqlStatement, title, attributeId).Scan(&id)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{})
		}
		successfulRes := AttributeResponse{Id: id}
		c.JSON(http.StatusOK, successfulRes)
	}
}

// CreateService -
func CreateService(c *gin.Context) {
	db, ok := c.MustGet("databaseConn").(*sql.DB)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{})
	}

	var requestBody CreateServiceSchema
	if err := c.BindJSON(&requestBody); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{})
	} else {
		title := requestBody.Title
		sqlStatement := `
		INSERT INTO services (title)
		VALUES ($1)
		RETURNING id
		`
		id := ""
		err := db.QueryRow(sqlStatement, title).Scan(&id)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{})
		}
		successfulRes := CreateServiceResponse{Id: id}
		c.JSON(http.StatusOK, successfulRes)
	}
}

// CreateServiceAttributeValue - create a new service attribute value (not an attribute value.) This only applies to the service listed in the path.
func CreateServiceAttributeValue(c *gin.Context) {
	db, ok := c.MustGet("databaseConn").(*sql.DB)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{})
	}

	var requestBody CreateServiceAttributeValueSchema
	if err := c.BindJSON(&requestBody); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{})
	} else {
		lineId := c.Param("lineId")
		attributeValueId := requestBody.AttributeValueId

		sqlStatement := `
		INSERT INTO service_attribute_values (line_id, attribute_value_id)
		VALUES ($1, $2)
		RETURNING id
		`

		id := ""
		err := db.QueryRow(sqlStatement, lineId, attributeValueId).Scan(&id)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{})
		} else {
			successfulRes := CreateServiceResponse{Id: id}
			c.JSON(http.StatusOK, successfulRes)
		}
	}
}

func CreateServiceAttributeLine(c *gin.Context) {
	db, ok := c.MustGet("databaseConn").(*sql.DB)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{})
	}

	serviceId := c.Param("serviceId")
	var requestBody CreateServiceAttributeLineSchema
	if err := c.BindJSON(&requestBody); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{})
	} else {
		attributeId := requestBody.AttributeId
		sqlStatement := `
		INSERT INTO service_attribute_lines (service_id, attribute_id)
		VALUES ($1, $2)
		RETURNING id
		`
		id := ""
		err := db.QueryRow(sqlStatement, serviceId, attributeId).Scan(&id)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{})
		} else {
			successfulRes := AttributeResponse{Id: id}
			c.JSON(http.StatusOK, successfulRes)
		}
	}
}

// DeleteAttribute -
func DeleteAttribute(c *gin.Context) {
	db, ok := c.MustGet("databaseConn").(*sql.DB)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{})
	}
	attributeId := c.Param("attributeId")
	stmt, err := db.Prepare("DELETE FROM attributes WHERE id=$1")
	if err != nil {
		panic(err)
	}
	_, err = stmt.Exec(attributeId)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{})
	} else {
		c.JSON(http.StatusOK, gin.H{})
	}
}

// DeleteAttributeValue -
func DeleteAttributeValue(c *gin.Context) {
	db, ok := c.MustGet("databaseConn").(*sql.DB)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{})
	}
	valueID := c.Param("valueId")
	stmt, err := db.Prepare("DELETE FROM attribute_values WHERE id=$1")
	if err != nil {
		panic(err)
	}
	_, err = stmt.Exec(valueID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{})
	} else {
		c.JSON(http.StatusOK, gin.H{})
	}
}

// DeleteService -
func DeleteService(c *gin.Context) {
	db, ok := c.MustGet("databaseConn").(*sql.DB)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{})
	}
	serviceId := c.Param("serviceId")
	stmt, err := db.Prepare("DELETE FROM services WHERE id=$1")
	if err != nil {
		panic(err)
	}
	_, err = stmt.Exec(serviceId)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{})
	} else {
		c.JSON(http.StatusOK, gin.H{})
	}
}

// DeleteServiceAttributeValue - Delete a service attribute value. valueId here is the service attribute value id NOT the attribute value id.
func DeleteServiceAttributeValue(c *gin.Context) {
	db, ok := c.MustGet("databaseConn").(*sql.DB)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{})
	}
	valueId := c.Param("valueId")
	stmt, err := db.Prepare("DELETE FROM service_attribute_values WHERE id=$1")
	if err != nil {
		panic(err)
	}
	_, err = stmt.Exec(valueId)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{})
	} else {
		c.JSON(http.StatusOK, gin.H{})
	}
}

func DeleteServiceAttributeLine(c *gin.Context) {
	db, ok := c.MustGet("databaseConn").(*sql.DB)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{})
	}
	lineId := c.Param("lineId")
	stmt, err := db.Prepare("DELETE FROM service_attribute_lines WHERE id=$1")
	if err != nil {
		panic(err)
	}
	_, err = stmt.Exec(lineId)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{})
	} else {
		c.JSON(http.StatusOK, gin.H{})
	}
}

// GetAllAttributeValues -
func GetAllAttributeValues(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetAllAttributes -
func GetAllAttributes(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetAllServices -
func GetAllServices(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetFee - Retrieve the fee and other information for a particular service variant, ie. (Amended and Restated Articles in Delaware, 1 Day)
func GetFee(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetService -
func GetService(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetServiceAttrVals - Get all the service attribute values for a particular attribute.
func GetServiceAttrVals(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// UpdateAttribute -
func UpdateAttribute(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// UpdateAttributeValue -
func UpdateAttributeValue(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// UpdateService -
func UpdateService(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
