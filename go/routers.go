/*
 * CorpFees
 *
 * API for the Corp Fees central.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package fee_schedule_server

import (
	"database/sql"
	"net/http"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	//HandlerFunc gin.HandlerFunc
	//MiddlewareFunc gin.Han
	FuncChain gin.HandlersChain
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter(db *sql.DB) *gin.Engine {
	router := gin.Default()
	router.Use(DBMiddleware(db))
	// TODO: TIGHTEN THIS UP. THIS IS HIGHLY INSECURE
	config := cors.DefaultConfig()
	config.AllowAllOrigins = true
	config.AllowHeaders = []string{"content-type", "session_token", "user_id"}
	//config.AllowOrigins = []string{"http://localhost:3000"}
	config.AllowCredentials = true
	router.Use(cors.New(config))

	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.FuncChain...)
		case http.MethodPost:
			router.POST(route.Pattern, route.FuncChain...)
		case http.MethodPut:
			router.PUT(route.Pattern, route.FuncChain...)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.FuncChain...)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.FuncChain...)
		}
	}

	return router
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"CreateAttribute",
		http.MethodPost,
		"/attributes",
		[]gin.HandlerFunc{AuthMiddleWare, CreateAttribute},
	},

	{
		"CreateAttributeValue",
		http.MethodPost,
		"/attributes/:attributeId/values",
		[]gin.HandlerFunc{CreateAttributeValue},
	},

	{
		"CreateService",
		http.MethodPost,
		"/services",
		[]gin.HandlerFunc{CreateService},
	},

	{
		"CreateServiceAttributeValue",
		http.MethodPost,
		"/service_attribute_lines/:lineId/values",
		[]gin.HandlerFunc{CreateServiceAttributeValue},
	},

	{
		"CreateServiceAttributeLine",
		http.MethodPost,
		"/services/:serviceId/attributes/:attributeId/lines",
		[]gin.HandlerFunc{CreateServiceAttributeLine},
	},

	{
		"CreateVariant",
		http.MethodPost,
		"/service_variants/",
		[]gin.HandlerFunc{CreateVariant},
	},

	{
		"DeleteAttribute",
		http.MethodDelete,
		"/attributes/:attributeId",
		[]gin.HandlerFunc{DeleteAttribute},
	},

	{
		"DeleteAttributeValue",
		http.MethodDelete,
		"/attribute_values/:valueId",
		[]gin.HandlerFunc{DeleteAttributeValue},
	},

	{
		"DeleteService",
		http.MethodDelete,
		"/services/:serviceId/",
		[]gin.HandlerFunc{DeleteService},
	},

	{
		"DeleteServiceAttributeValue",
		http.MethodDelete,
		"/service_attribute_values/:valueId",
		[]gin.HandlerFunc{DeleteServiceAttributeValue},
	},

	{
		"DeleteServiceAttributeLine",
		http.MethodDelete,
		"/service_attribute_lines/:lineId",
		[]gin.HandlerFunc{DeleteServiceAttributeLine},
	},

	{
		"DeleteVariant",
		http.MethodDelete,
		"/service_variants/:variantId",
		[]gin.HandlerFunc{DeleteVariant},
	},

	{
		"GetAllAttributeValues",
		http.MethodGet,
		"/attributes/:attributeId/values",
		[]gin.HandlerFunc{GetAllAttributeValues},
	},

	{
		"GetAllAttributes",
		http.MethodGet,
		"/attributes",
		[]gin.HandlerFunc{GetAllAttributes},
	},

	{
		"GetAllAttributes",
		http.MethodGet,
		"/attributes/:attributeId",
		[]gin.HandlerFunc{GetAttribute},
	},

	{
		"GetAllServices",
		http.MethodGet,
		"/services",
		[]gin.HandlerFunc{AuthMiddleWare, GetAllServices},
	},

	{
		"GetVariants",
		http.MethodGet,
		"/service_variants/",
		[]gin.HandlerFunc{GetVariants},
	},

	{
		"GetService",
		http.MethodGet,
		"/services/:serviceId/",
		[]gin.HandlerFunc{GetService},
	},

	{
		"GetServiceAttributeLines",
		http.MethodGet,
		"/services/:serviceId/attribute_lines",
		[]gin.HandlerFunc{GetServiceAttrLines},
	},

	{
		"GetServiceAttrLine",
		http.MethodGet,
		"/service_attribute_lines/:lineId",
		[]gin.HandlerFunc{GetServiceAttrLine},
	},

	{
		"UpdateAttribute",
		http.MethodPatch,
		"/attributes/:attributeId",
		[]gin.HandlerFunc{UpdateAttribute},
	},

	{
		"UpdateAttributeValue",
		http.MethodPatch,
		"/attribute_values/:valueId",
		[]gin.HandlerFunc{UpdateAttributeValue},
	},

	{
		"UpdateService",
		http.MethodPatch,
		"/services/:serviceId/",
		[]gin.HandlerFunc{UpdateService},
	},

	{
		"LoginUser",
		http.MethodPost,
		"/login",
		[]gin.HandlerFunc{LoginUser},
	},
}
