/*
 * CorpFees
 *
 * API for the Corp Fees central.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package fee_schedule_server

import (
	"database/sql"
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// ApiMiddleware will add the db connection to the context
func ApiMiddleware(db *sql.DB) gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Set("databaseConn", db)
		c.Next()
	}
}

// NewRouter returns a new router.
func NewRouter(db *sql.DB) *gin.Engine {
	router := gin.Default()
	router.Use(ApiMiddleware(db))

	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		http.MethodGet,
		"/",
		Index,
	},

	{
		"CreateAttribute",
		http.MethodPost,
		"/attributes",
		CreateAttribute,
	},

	{
		"CreateAttributeValue",
		http.MethodPost,
		"/attributes/:attributeId/values",
		CreateAttributeValue,
	},

	{
		"CreateService",
		http.MethodPost,
		"/services",
		CreateService,
	},

	{
		"CreateServiceAttributeValue",
		http.MethodPost,
		"/services/:serviceId/attribute_lines/:lineId/values",
		CreateServiceAttributeValue,
	},

	{
		"CreateServiceAttributeLine",
		http.MethodPost,
		"/services/:serviceId/attribute_lines",
		CreateServiceAttributeLine,
	},

	{
		"CreateVariant",
		http.MethodPost,
		"/services/:serviceId/variants",
		CreateVariant,
	},

	{
		"DeleteAttribute",
		http.MethodDelete,
		"/attributes/:attributeId",
		DeleteAttribute,
	},

	{
		"DeleteAttributeValue",
		http.MethodDelete,
		"/attributes/:attributeId/values/:valueId",
		DeleteAttributeValue,
	},

	{
		"DeleteService",
		http.MethodDelete,
		"/services/:serviceId/",
		DeleteService,
	},

	{
		"DeleteServiceAttributeValue",
		http.MethodDelete,
		"/services/:serviceId/attribute_lines/:lineId/values/:valueId",
		DeleteServiceAttributeValue,
	},

	{
		"DeleteServiceAttributeLine",
		http.MethodDelete,
		"/services/:serviceId/attribute_lines/:lineId",
		DeleteServiceAttributeLine,
	},

	{
		"DeleteVariant",
		http.MethodDelete,
		"/services/:serviceId/variants/:variantId",
		DeleteVariant,
	},

	{
		"GetAllAttributeValues",
		http.MethodGet,
		"/attributes/:attributeId/values",
		GetAllAttributeValues,
	},

	{
		"GetAllAttributes",
		http.MethodGet,
		"/attributes",
		GetAllAttributes,
	},

	{
		"GetAllServices",
		http.MethodGet,
		"/services",
		GetAllServices,
	},

	{
		"GetFee",
		http.MethodGet,
		"/services/:serviceId/variants/",
		GetVariant,
	},

	{
		"GetService",
		http.MethodGet,
		"/services/:serviceId/",
		GetService,
	},

	{
		"GetServiceAttrVals",
		http.MethodGet,
		"/services/:serviceId/attribute_lines/:lineId/values",
		GetServiceAttrLineVals,
	},

	{
		"UpdateAttribute",
		http.MethodPatch,
		"/attributes/:attributeId",
		UpdateAttribute,
	},

	{
		"UpdateAttributeValue",
		http.MethodPatch,
		"/attributes/:attributeId/values/:valueId",
		UpdateAttributeValue,
	},

	{
		"UpdateService",
		http.MethodPatch,
		"/services/:serviceId/",
		UpdateService,
	},
}
